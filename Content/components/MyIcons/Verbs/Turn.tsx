import Svg, {
  Circle,
  Ellipse,
  G,
  Text,
  TSpan,
  TextPath,
  Path,
  Polygon,
  Polyline,
  Line,
  Rect,
  Use,
  Image,
  Symbol,
  Defs,
  LinearGradient,
  RadialGradient,
  Stop,
  ClipPath,
  Pattern,
  Mask,
} from 'react-native-svg';
import React from 'react';
import {View, StyleSheet} from 'react-native';

import Colors from '../../../constants/Colors';

import {VerbProps} from './index';

export const Turn = ({positive, frame}: VerbProps) => {
  const stages = 8;
  const stage = frame % stages;

  return (
    <View
      style={[
        StyleSheet.absoluteFill,
        {alignItems: 'center', justifyContent: 'center'},
      ]}>
      <Svg
        width="100%"
        height="100%"
        viewBox="0 0 600 600"
        fill={
          positive < 3
            ? Colors.green50
            : positive > 5
            ? Colors.amber50
            : Colors.red50
        }>
        <Circle id="background" opacity="0.5" cx="300" cy="300" r="300" />
        {[0, 1, 2, 3].includes(stage) && (
          <Path
            d="M258 301C253 324 248 346 243 368C242 374 244 379 247 383C254 390 254 400 254 409C254 410 254 411 253 412C249 410 251 405 248 401C247 407 250 410 251 414C252 417 254 419 252 421C250 423 247 420 245 419C242 417 239 415 236 412C231 408 228 403 229 396C231 372 234 348 237 325C239 313 241 302 243 290C244 288 244 286 242 285C239 283 240 281 241 278C245 267 249 257 253 246C255 242 258 239 262 237C267 235 271 233 276 231C284 229 288 224 290 216C292 212 291 209 288 205C282 200 277 194 273 188C272 186 270 185 268 186C263 188 258 185 255 182C249 174 245 166 244 157C243 149 244 147 252 148C253 148 254 149 256 147C256 145 256 142 255 139C254 127 255 115 257 103C261 83 275 74 293 70C311 66 327 71 342 81C352 88 356 99 357 110C360 138 359 165 349 191C346 198 343 205 338 211C331 219 322 223 311 221C310 221 309 221 308 221C308 221 308 221 307 221C306 225 308 228 311 230C319 233 327 236 334 241C339 243 341 246 342 252C343 264 345 276 346 288C346 290 346 292 344 293C340 293 340 295 340 298C341 310 341 321 341 333C340 346 339 358 338 371C337 377 338 383 340 388C344 398 346 408 342 418C341 420 341 422 339 424C339 426 337 428 335 427C332 427 332 425 332 423C332 422 332 421 331 421C328 429 328 437 327 445C325 469 322 493 320 517C319 528 318 539 317 550C316 557 319 562 326 565C331 567 336 569 341 571C343 572 345 573 345 576C344 578 342 578 340 578C336 580 332 579 328 578C322 576 315 574 309 573C303 571 302 570 303 564C307 544 307 524 309 504C310 475 311 446 311 417C311 406 311 395 311 384C311 380 309 378 305 378C296 379 296 378 294 387C285 438 276 489 267 541C266 546 265 551 267 556C271 564 266 570 262 575C255 583 248 582 240 580C236 579 235 577 238 573C239 573 239 572 240 572C252 563 255 549 257 535C260 507 264 479 266 451C269 427 271 403 272 380C272 371 272 362 271 353C270 350 270 348 266 348C262 347 262 344 262 341C264 327 264 312 264 298C264 296 264 294 262 292C259 294 259 298 258 301Z"
            fill="black"
          />
        )}

        {[4, 5, 6, 7].includes(stage) && (
          <Path
            d="M269 304C261 328 255 353 248 376C247 381 249 385 252 388C259 396 256 406 256 416C256 416 255 417 255 418C251 415 253 410 251 405C250 411 251 415 253 419C253 421 256 424 253 426C251 428 249 425 246 424C246 423 245 422 244 422C234 414 230 405 233 392C239 364 243 336 251 309C252 304 254 299 255 294C255 293 256 291 255 290C251 288 253 285 254 282C258 271 263 261 269 251C270 248 272 246 276 244C282 242 289 240 295 238C301 236 302 234 303 229C282 225 271 210 263 192C253 168 248 144 250 118C251 103 257 92 270 84C287 73 304 71 323 78C336 82 344 91 348 104C352 114 353 124 353 135C353 138 354 142 355 145C356 146 357 146 358 145C365 144 368 146 368 153C368 163 365 171 360 179C357 184 353 187 347 186C345 185 344 187 343 188C337 199 330 209 323 218C318 224 321 237 328 240C334 243 340 246 347 247C354 249 355 251 356 258C359 270 359 282 361 294C361 297 361 299 358 300C355 300 355 303 355 304C355 315 355 325 355 336C355 350 354 364 352 378C352 384 353 389 355 395C360 405 360 416 356 426C356 427 356 428 355 429C354 432 353 434 349 434C346 433 347 430 346 428C344 427 343 431 341 429C339 427 339 424 340 422C344 416 342 410 340 402C338 412 337 421 335 430C332 456 330 481 328 507C327 520 326 532 325 545C325 546 325 547 325 548C326 562 327 563 338 568C342 569 346 570 350 573C351 574 353 575 353 577C353 579 351 579 349 579C345 581 340 580 336 579C330 577 323 575 317 574C312 573 310 570 311 565C312 560 313 555 314 550C315 538 315 526 316 514C316 489 316 465 317 441C317 425 318 410 319 395C319 389 317 387 312 388C311 388 310 388 309 387C305 387 303 388 302 393C288 439 279 487 268 535C268 537 267 540 267 543C266 546 265 550 268 554C272 562 268 569 263 576C258 582 251 583 244 582C241 582 239 579 241 575C241 574 242 573 243 572C253 563 255 550 257 538C261 511 266 483 269 456C273 429 278 402 281 375C282 369 280 364 279 358C279 356 277 356 275 355C271 355 269 353 270 349C271 339 272 328 273 318C274 313 274 308 275 303C275 301 275 299 273 298C270 299 270 302 269 304Z"
            fill="black"
          />
        )}
      </Svg>
    </View>
  );
};
